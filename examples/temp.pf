newtype 

Qux = enum ZORT, TROZ, BLERP, SPONG

Blerp = clone int using +, -

Zerp = clone int using +, -, *

def

foo(q Qux) -> int :
    int q

bar(q Qux) -> int :
    int q

(p Qux) + (q Qux) -> Qux :
    Qux[(int(p) + int(q)) % 4]

newtype

Foobarable = interface :
    foo(x self) -> int
    bar(x self) -> int

Addable = interface :
    (x self) + (y self) -> self

Comparable = interface :
    (x self) < (y self) -> bool
    (x self) <= (y self) -> bool
    (x self) > (y self) -> bool
    (x self) >= (y self) -> bool

Subtractable = interface :
    (x self) - (y self)

Multipliable = interface :
    (x self) * (y self)