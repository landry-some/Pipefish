newtype

Person = struct(name string, age int)

Color = enum RED, GREEN, BLUE

FloatClone = clone float 
IntClone = clone int
ListClone = clone list 
MapClone = clone map 
PairClone = clone pair 
RuneClone = clone rune 
SetClone = clone set 
StringClone = clone string 

def

boolTest(x bool) : golang {
    return !x
}

floatTest(x float) : golang {
    return x
}

intTest(x int) : golang {
    return double(x)
}

stringTest(x string) : golang {
    return x
}

enumTest(x Color) : golang {
    return x
}

floatCloneTest(x FloatClone) : golang {
    return x
}

intCloneTest(x IntClone) : golang {
    return x
}

listCloneTest(x ListClone) : golang {
    return x
}

mapCloneTest(x MapClone) : golang {
    return x
}

pairCloneTest(x PairClone) : golang {
    return x
}

runeCloneTest(x RuneClone) : golang {
    return x
}

setCloneTest(x SetClone) : golang {
    return x
}

stringCloneTest(x StringClone) : golang {
    return x
}

constructPerson(aName string, anAge int) -> Person : golang {
    return Person{Name: aName, Age: anAge}
}

deconstructPerson(aPerson Person) -> string, int : golang {
    return aPerson.Name, aPerson.Age
}

golang {
    func double(x int) int {
        return 2 * x
    }
}
