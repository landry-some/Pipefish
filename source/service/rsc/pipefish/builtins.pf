// This file provides the type signatures for the builtin functions.

newtype

Error = struct(errorCode, errorText string)

$LoggingScope = enum $NONE, $SELECTED, $ALL

$Logging = struct(loggingScope $LoggingScope)

def

// Symbols are in alphabetical order of their hooks.

(x float) + (y float) -> float : builtin "add_floats"
(x int) + (y int) -> int : builtin "add_integers"
(x list) + (y list) -> list : builtin "add_lists"
(x rune) + (y rune) -> string : builtin "add_rune_to_rune"
(x rune) + (y string) -> string : builtin "add_rune_to_string"
(x set) + (y set) -> set : builtin "add_sets"
(x string) + (y rune) -> string : builtin "add_string_to_rune"
(x string) + (y string) -> string : builtin "add_strings"
(x float) / (y float) -> float : builtin "divide_floats"
(x int) / (y int) -> int : builtin "divide_integers"
(x float) > (y float) -> bool : builtin "gt_floats"
(x float) >= (y float) -> bool : builtin "gte_floats"
(x int) > (y int) -> bool : builtin "gt_ints"
(x int) >= (y int) -> bool : builtin "gte_ints"
(x float) < (y float) -> bool : builtin "lt_floats"
(x float) <= (y float) -> bool : builtin "lte_floats"
(x int) < (y int) -> bool : builtin "lt_ints"
(x int) <= (y int) -> bool : builtin "lte_ints"
(x single?) :: (y single?) -> pair : builtin "make_pair"
(x int) % (y int) -> int : builtin "modulo_integers"
(x float) * (y float) -> float : builtin "multiply_floats"
(x int) * (y int) -> int : builtin "multiply_integers"
- (x float) -> float : builtin "negate_float"
- (x int) -> int : builtin "negate_integer"
(x float) - (y float) -> float : builtin "subtract_floats"
(x int) - (y int) -> int : builtin "subtract_integers"
(x type) / (y type) -> single : builtin "type_union"

// Ordinary functions are in order of their function name.

cast(x single, y type) -> single : builtin "cast"
codepoint(x rune) -> int : builtin "codepoint"   
error(x string) -> error : builtin "make_error"
float(x floatlike) -> float : builtin "cast_to_float"
float(x int) -> float : builtin "float_of_int"
float(x string) -> float : builtin "float_of_string"
(x single?) in (y list) -> bool : builtin "single_in_list"
(x single?) in (y set) -> bool : builtin "single_in_set"
(x single?) in (y tuple) -> bool : builtin "single_in_tuple"
(x single?) in (y type) -> bool : builtin "single_in_type"
first(x tuple) -> single? : builtin "first_in_tuple"
int(x intlike) -> int : builtin "cast_to_int"
int(x string) -> int : builtin "int_of_string"
int(x float) -> int : builtin "int_of_float"
int(x enum) -> int : builtin "int_of_enum"
keys(x maplike) -> list : builtin "keys_of_map"
keys(x struct) -> list : builtin "keys_of_struct"
label(x string) -> label : builtin "label_of_string"
last(x tuple) -> single? : builtin "last_in_tuple"
len(x listlike) -> int : builtin "len_list"
len(x maplike) -> int : builtin "len_map"
len(x setlike) -> int : builtin "len_set"
len(x string) -> int : builtin "len_string"
len(x tuple) -> int : builtin "len_tuple"
list(x listlike) -> list : builtin "cast_to_list"
literal(x single?) -> string : builtin "literal"
literal(x tuple) -> string : builtin "literal"
map(x maplike) -> map : builtin "cast_to_map"
map(x ... pair) -> map : makeMap(x)
makeMap(x tuple) -> map : builtin "make_map"
pair(x pairlike) -> pair : builtin "cast_to_pair"
rune(x int) -> rune : builtin "rune"
set(x setlike) -> set : builtin "cast_to_set"
set(x ... single?) -> set : makeSet(x)
makeSet(x tuple) -> set : builtin "make_set"   
// string(x stringlike) -> string : builtin "cast_to_string"        
string(x single?) -> string : builtin "string"
tuple(x tuple) -> tuple : builtin "tuple_of_tuple"
tuple(x ... single?) -> tuple : builtin "tuple_of_varargs"
type(x single?) -> type : builtin "type"
type(x ok) -> type : builtin "type"
type(x tuple) -> type : builtin "type_of_tuple"
types(x type) -> set : builtin "types_of_type"
varchar(x int) -> type : builtin "varchar"
(x list) with (y ... single?) -> list : builtin "list_with"
(x map) with (y ... single?) -> map : builtin "map_with"
(x struct) with (y ... single?) -> struct : builtin "struct_with"
(x type) with (y ... single?) -> struct : typeWithMaker(x, y)
typeWithMaker(x type, y tuple) -> struct : builtin "type_with"        
(x map) without (y ... single?) -> map : builtin "map_without"

// This supplies us with a single code address to call which will dispatch on the
// type of x to the relevant instance of the 'string' function.
stringify(x single?) -> string :
    string x