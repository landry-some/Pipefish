import

golang "unicode"

newtype

Case = enum UPPER_CASE, LOWER_CASE, TITLE_CASE, MAX_CASE

def

isControl(r rune) -> bool : golang {
	return unicode.IsControl(r)
}

isDigit(r rune) -> bool : golang {
	return unicode.IsDigit(r)
}

isGraphic(r rune) -> bool : golang {
	return unicode.IsGraphic(r)
}

isIn(r rune, bounds ... pair) : 
	from flag = false for _::bound = range bounds :
		bound[0] <= codepoint(r) and codepoint(r) < bound[1] :
			true
		else :
			continue

isLetter(r rune) -> bool : golang {
	return unicode.IsLetter(r)
}

isLower(r rune) -> bool : golang {
	return unicode.IsLower(r)
}

isMark(r rune) -> bool : golang {
	return unicode.IsMark(r)
}

isNumber(r rune) -> bool : golang {
	return unicode.IsNumber(r)
}

isPrint(r rune) -> bool : golang {
	return unicode.IsPrint(r)
}

isPunct(r rune) -> bool : golang {
	return unicode.IsPunct(r)
}

isSpace(r rune) -> bool : golang {
	return unicode.IsSpace(r)
}

isSymbol(r rune) -> bool : golang {
	return unicode.IsSymbol(r)
}

isTitle(r rune) -> bool : golang {
	return unicode.IsTitle(r)
}

isUpper(r rune) -> bool : golang {
	return unicode.IsUpper(r)
}

simpleFold(r rune) -> rune : golang {
	return unicode.SimpleFold(r)
}

toCase(c Case, r rune) -> rune : 
	wrapToCase(int(c), r)

wrapToCase(c int, r rune) -> rune : golang {
	return unicode.To(c, r)
}

toLower(r rune) -> rune : golang {
	return unicode.ToLower(r)
}

toTitle(r rune) -> rune : golang {
	return unicode.ToTitle(r)
}

toUpper(r rune) -> rune : golang {
	return unicode.ToUpper(r)
}
