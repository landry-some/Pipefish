import

golang "time"

newtype

Weekday = enum SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY

def

add (t Time, duration int) -> Time : golang {
    return goToPf(pfToGo(t).Add(time.Duration(duration)))
}

addDate(t Time, years, months, days int) -> Time : golang {
    return goToPf(pfToGo(t).AddDate(years, months, days))
} 

after(t, u Time) -> bool : golang {
    return pfToGo(t).After(pfToGo(u))
}

before(t, u Time) -> bool : golang {
    return pfToGo(t).Before(pfToGo(u))
}

compare(t, u Time) -> int : golang {
    return pfToGo(t).Compare(pfToGo(u))
}

equal(t, u Time) -> bool : golang {
    return pfToGo(t).Equal(pfToGo(u))
}

format(t Time, layout string) -> string : golang {
    return pfToGo(t).Format(layout)
}

isDst(t Time) -> bool : golang {
    return pfToGo(t).IsDST()
}

ISOWeek(t Time) -> int, int : golang {
    return pfToGo(t).ISOWeek()
}

isZero(t Time) -> bool : golang {
    return pfToGo(t).IsZero()
}

local(t Time) -> Time : golang {
    return goToPf(pfToGo(t).Local())
}

parse(layout, value string) : golang {
    newTime, err := time.Parse(layout, value)
    if err != nil {
        return err
    }
    return goToPf(newTime)
}

parseDuration(s string) : golang {
    dur, err := time.ParseDuration(s)
    if err != nil {
        return err
    }
    return int(dur)
}

round(t Time, duration int) -> Time : golang {
    return goToPf(pfToGo(t).Round(time.Duration(duration)))
}

sub (t Time, duration int) -> int : golang {
    return int(pfToGo(t).Sub(time.Duration(duration)))
}

timeIn(t Time, location string) : golang {
    newLoc, err := time.LoadLocation(location)
    if err != nil {
        return err
    }
    return goToPf(pfToGo(t).In(newLoc))
}

timeToUnix(t Time) -> int : golang {
    return int(pfToGo(t).Unix())
}

timeToUnixMicro(t Time) -> int : golang {
    return int(pfToGo(t).UnixMicro())
}

timeToUnixMilli(t Time) -> int : golang {
    return int(pfToGo(t).UnixMilli())
}

timeToUnixNano(t Time) -> int : golang {
    return int(pfToGo(t).UnixNano())
}

truncate(t Time, duration int) -> Time : golang {
    goToPf(pfToGo(t).Truncate(time.Duration(duration)))
}

unixToTime(sec, usec int) -> Time : golang {
    return goToPf(time.Unix(int64(sec), int64(usec)))
}

unixMicroToTime(usec int) -> Time : golang {
    return goToPf(time.UnixMicro(int64(usec)))
}

unixMilliToTime(msec int) -> Time : golang {
    return goToPf(time.UnixMilli(int64(msec)))
}

UTC(t Time) -> Time : golang {
    return goToPf(pfToGo(t).UTC())
}

weekday(t Time) -> Weekday :
    Weekday[goWeekday(t)]

goWeekday(t Time) -> int : golang {
    return int((pfToGo(t)).Weekday())
}

yearDay(t Time) -> int : golang {
    return (pfToGo(t)).YearDay()
}

golang {

    func pfToGo(t Time) time.Time {
        locObj, _ := time.LoadLocation(t.Loc)
        goMonth := time.Month(t.Month)
        return time.Date(t.Year, goMonth, t.Day, t.Hour, t.Minute, t.Second, t.Nanosecond, locObj)
    }

    func goToPf(t time.Time) Time {
        return Time{t.Year(), int(t.Month()), t.Day(), t.Hour(), t.Minute(), t.Second(), t.Nanosecond(), t.Location().String()}
    }

}


// func (t Time) Add(d Duration) Time
// func (t Time) AddDate(years int, months int, days int) Time
// func (t Time) After(u Time) bool
// func (t Time) AppendFormat(b []byte, layout string) []byte
// func (t Time) Before(u Time) bool
// func (t Time) Clock() (hour, min, sec int)
// func (t Time) Compare(u Time) int
// func (t Time) Date() (year int, month Month, day int)
// func (t Time) Day() int
// func (t Time) Equal(u Time) bool
// func (t Time) Format(layout string) string
// func (t Time) GoString() string
// func (t *Time) GobDecode(data []byte) error
// func (t Time) GobEncode() ([]byte, error)
// func (t Time) Hour() int
// func (t Time) ISOWeek() (year, week int)
// func (t Time) In(loc *Location) Time
// func (t Time) IsDST() bool
// func (t Time) IsZero() bool
// func (t Time) Local() Time
// func (t Time) Location() *Location
// func (t Time) MarshalBinary() ([]byte, error)
// func (t Time) MarshalJSON() ([]byte, error)
// func (t Time) MarshalText() ([]byte, error)
// func (t Time) Minute() int
// func (t Time) Month() Month
// func (t Time) Nanosecond() int
// func (t Time) Round(d Duration) Time
// func (t Time) Second() int
// func (t Time) String() string
// func (t Time) Sub(u Time) Duration
// func (t Time) Truncate(d Duration) Time
// func (t Time) UTC() Time
// func (t Time) Unix() int64
// func (t Time) UnixMicro() int64
// func (t Time) UnixMilli() int64
// func (t Time) UnixNano() int64
// func (t *Time) UnmarshalBinary(data []byte) error
// func (t *Time) UnmarshalJSON(data []byte) error
// func (t *Time) UnmarshalText(data []byte) error
// func (t Time) Weekday() Weekday
// func (t Time) Year() int
// func (t Time) YearDay() int
// func (t Time) Zone() (name string, offset int)
// func (t Time) ZoneBounds() (start, end Time)