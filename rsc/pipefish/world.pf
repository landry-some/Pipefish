import

// gocode "os"
gocode "time"

types

Output = struct()
Terminal = struct()
Input = struct(prompt string)
Random = struct(params single)
RandomSeed = struct()
Clock = struct()
File = struct(filepath string, asType type)
FileExists = struct(filepath string)

def

//File(filepath string) :
//    File(filepath, string) 

cmd

posttooutputmaker(x single) : builtin "post_to_output"
post (x single) to (o Output): posttooutputmaker(x)
post (x single) : builtin "post_to_output"
// post (x tuple) to (o Output): posttooutputmaker(x)

posttoterminalmaker(x single) : builtin "post_to_terminal"
post (x single) to (t Terminal): posttoterminalmaker(x)

get (x ref) from (i Input) : builtin "get_from_input"

goGetClock() -> Time : gocode {
    goNow := time.Now()
    return Time{goNow.Year(), int(goNow.Month()), goNow.Day(), goNow.Hour(), goNow.Minute(), goNow.Second(), goNow.Nanosecond(), goNow.Location().String()}
}

get (x ref) from (c Clock) :
    x = goGetClock() 

// goFileExists(fname string) : gocode {
//     _, err := os.Stat(fname)
//     return err == nil
// }

// get (x ref) from (fileAccess FileExists) :
//     x = goFileExists(fileAccess[filepath])

